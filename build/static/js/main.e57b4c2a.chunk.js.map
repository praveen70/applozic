{"version":3,"sources":["components/pagination/pagination.js","components/spinner/spinner.js","components/Userview/userdeteils.js","components/Userview/userview.js","components/list-user/list-user-body.js","components/search/search.js","components/list-user/list-user.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","Fragment","className","map","number","index","key","onClick","href","Spinner","Userdeteils","userInfo","loading","data","src","avatar","alt","style","width","fontWeight","paddingTop","first_name","last_name","email","Indiviualuser","click","props","id","marginTop","this","overflow","React","Component","Usercontent","bodyData","useState","setuserInfo","makeapicall","a","axios","get","res","ele","data-column","Searchuser","state","uservalue","handleChange","e","value","target","setState","onChange","type","placeholder","event","title","Listuser","posts","setPosts","values","setValue","setLoading","currentPage","setCurrentPage","pagenumber","setPageNumber","useEffect","console","log","fetchPosts","indexOfLastPost","per_page","indexOfFirstPost","currentPosts","slice","pageNumber","searchUser","filter","names","toLowerCase","indexOf","float","paddingBottom","paddingRight","paddingLeft","total","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e57b4c2a.chunk.js","sourcesContent":["import React from \"react\";\nimport './pagination.scss'\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\n    const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"pagination\">\n        {pageNumbers.map((number, index) => {\n          return (\n            <span key={index}>\n              <a \n                onClick={() => paginate(number)}\n                href=\"!#\"\n                className=\"page-link\"\n              >\n                {number}\n              </a>\n            </span>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport './spinner.scss';\nconst Spinner = () => {\n    return(\n        <div className=\"loader\"></div>\n\n    )\n}\n\nexport default Spinner;","import React from \"react\";\nimport \"./userdeteils.scss\";\nimport Spinner from '../spinner/spinner';\n\nconst Userdeteils = ({ userInfo, loading }) => {\n  let { data } = userInfo;\n  if(loading){\n    return <Spinner />\n\n}\n  \n  return (\n    <div className=\"row\">\n      <div className=\"column\">\n        <div className=\"card\">\n        <img src={data && data.avatar} alt=\"Avatar\" style={{width:\"50%\"}} />\n        <p className=\"fistname\" style={{fontWeight: 600, paddingTop:'13px'}}>{data && data.first_name} {data && data.last_name}</p>\n        <p style={{fontWeight: 600,}}>Email : {data && data.email}</p>\n        </div>\n      </div>\n\n  \n    </div>\n    \n  );\n};\n\nexport default Userdeteils;\n","import React from \"react\";\nimport Userdeteils from './userdeteils';\nimport './userview.scss';\nclass Indiviualuser extends React.Component{\n\n  click=()=>{\n    this.props.onClick()\n  }\n  \n  render(){\n   \n    return (\n      <React.Fragment>\n      <div id=\"wrapper\" style={{marginTop: '70px', }}>\n        <p><a className=\"button\" href=\"#popup2\" onClick={this.click}>View</a></p>\n      </div>\n      <div id=\"popup2\" className=\"overlay light\">\n        <a className=\"cancel\" href=\"#\"></a>\n        <div className=\"popup\">\n          <a className=\"close\" href=\"#\">&times;</a>\n          <div className=\"content\" style={{overflow: 'hidden'}}>\n            <Userdeteils userInfo={this.props.userInfo} loading={this.props.loading} />\n          </div>\n        </div>\n      </div>\n      </React.Fragment>\n    );\n\n  }\n}\n\n\n\nexport default Indiviualuser\n","import React , { useState }from 'react';\nimport Indiviualuser from '../Userview/userview';\nimport Spinner from '../spinner/spinner';\nimport axios from 'axios';\n\n\nconst Usercontent = ({bodyData, loading}) =>{\n //console.log(bodyData, \"bodyData\")\n  const [userInfo, setuserInfo] = useState([]);\n    if(loading){\n        return <Spinner />\n    \n    }\n    const makeapicall = async (id)  => {\n      const res = await axios.get(`https://reqres.in/api/users/${id}`);\n      setuserInfo(res.data);\n     \n    }\nreturn(\n\n   <React.Fragment>\n        {\n          bodyData && bodyData && bodyData.map((ele,index) => {\n           \n             \n              return(\n                \n                  <tr key={index}>\n                   \n                    <td>{ele.id}</td>\n                    <td data-column=\"First Name\">\n                   \n                    <img src={ele.avatar} alt={ele.first_name} />\n                    \n                    </td>\n                    <td>{ele.first_name}</td>\n                    <td>{ele.last_name}</td>\n                    <Indiviualuser onClick={()=>makeapicall(ele.id)} \n                    userInfo={userInfo}\n                    id={ele.id}\n                    loading={loading}\n                    />\n                    \n                </tr>\n              )\n          })  \n        }\n    </React.Fragment>\n    \n\n)\n \n}\n\nexport default Usercontent;","import React from \"react\";\nimport './search.scss';\n\nclass Searchuser extends React.Component{\n    state = {\n        uservalue:'',\n      };\n\n\n    handleChange = (e) => {\n        const { value } = e.target;\n        this.setState({ uservalue: value})\n        this.props.onChange(value)\n      \n    }\n    render(){\n        return (\n            <form>\n              <input type=\"text\" className=\"textbox\" placeholder=\"Search\" onChange={(event) => this.handleChange(event)}\n              value={this.state.uservalue}\n              />\n              <input title=\"Search\" value=\"ï€‚\"  className=\"button\" />\n            </form>\n          );\n    }\n}\n\n\nexport default Searchuser;\n","import React, { useState, useEffect } from 'react';\nimport Pagination from '../pagination/pagination'\nimport \"./list-user.scss\";\nimport Usercontent from './list-user-body';\nimport axios from 'axios';\nimport Searchuser from '../search/search';\n\n\n\nconst Listuser = () => {\n    const [posts, setPosts] = useState([]);\n    const [values, setValue] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [currentPage,  setCurrentPage] = useState(1);\n    // const [postsPerPage] = useState(4);\n    const [pagenumber , setPageNumber] = useState(1);\n  \n  \n   \n\n    useEffect(() => {\n      const fetchPosts = async () => {\n        setLoading(true);\n        const res = await axios.get(`https://reqres.in/api/users?page=${pagenumber}`);\n\n        console.log(res, \"res\")\n        setPosts(res.data);\n        setLoading(false);\n      };\n  \n      fetchPosts();\n    }, [pagenumber]);\n    \n    let data  = posts &&  posts.data ? posts.data : [];\n   \n    const indexOfLastPost = currentPage * posts.per_page;\n    const indexOfFirstPost = posts.per_page - indexOfLastPost ;\n    const currentPosts = data.slice(indexOfFirstPost, indexOfLastPost);\n    \n    console.log(currentPosts, \"currentPage\")\n    // // Change page\n  \n    const paginate = async (pageNumber) =>{ \n       setCurrentPage(pageNumber);\n      setPageNumber(pageNumber)\n      \n      };\n\n    const handleSearch = (value) => {\n      setValue(value)\n    \n    }\n  \n    let searchUser = currentPosts.filter((names) => {\n     \n      return names.first_name.toLowerCase().indexOf(values.toLowerCase()) !== -1;\n    });\n    return (\n      <React.Fragment>\n      <div className='container mt-5'>\n       \n      <div style={{float: 'right', paddingBottom: '10px', paddingRight: '70px'}}>\n      <Searchuser data={searchUser} onChange={handleSearch} />\n      </div>\n        <table className=\"ui celled collapsing very basic table\">\n          <thead className=\"\">\n            <tr className=\"\">\n            <th className=\"\">Id</th>\n              <th className=\"\">Image</th>\n              <th className=\"\">Firstname</th>\n              <th className=\"\">Lastname</th>\n              <th className=\"\">Action</th>\n            </tr>\n          </thead>\n          <tbody className=\"body\">\n              <Usercontent bodyData={searchUser} loading={loading} />\n            </tbody>\n        </table>\n     <div style={{paddingLeft: '50px'}}>\n        <Pagination\n          postsPerPage={posts.per_page}\n          totalPosts={posts.total}\n          paginate={paginate}\n        />\n      \n\n     </div>\n      \n       \n      \n      </div>\n      </React.Fragment>\n    );\n  };\n  export default Listuser;\n\n\n\n\n","import React from 'react';\nimport Listuser from './components/list-user/list-user'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Listuser />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}